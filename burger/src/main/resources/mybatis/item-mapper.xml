<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	이 파일은 데이터베이스 SQL구문을 보관해두는 파일이다.
	이를 mapper(매퍼) 파일이라고 부른다.
	
	mapper 파일은 테이블당 1개씩 만드는 것을 원칙으로 하며, 여러 개 있을 수 있다.
	mapper 파일간 충돌을 방지하기 위해 별칭(namespace)을 부여하도록 강제한다.  
-->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="item">

	<!-- 
		insert를 수행할 수 있는 구문
		- id : 외부에서 구문을 호출하기 위한 이름(식별자)
		- parameterType : 외부에서 전달되는 데이터의 자료형
		
		myBatis에서는 데이터를 배치하기 위해 다음과 같은 형태의 식을 제공
		1. #{이름} : 전달된 데이터에서 해당하는 이름의 값을 자료형에 알맞게 동적으로 배치
		2. ${이름} : 전달된 데이터에서 해당하는 이름의 값을 어떠한 처리도 없이 정적으로 배치
	 -->
	<insert id="insert" parameterType="Item" >
		insert into item (item_no, item_name, item_price, category) values(#{item_no}, #{item_name}, #{item_price}, #{category})
	</insert>
	
	<select id="item_no" parameterType="int" resultType="Integer">
		select S.item_no from item I left outer join stock S on I.item_no = S.item_no 
			where branch_no = #{branch_no} 
				group by S.item_no, I.category order by category
	</select>
	
	<select id="all_list" resultType="Item">
		select item_no, item_name, item_price, category from item order by category asc
	</select>
	
	<select id="category_list" parameterType="String" resultType="Item">
		select item_no, item_name, item_price, category from item where category = #{category}
	</select>
	
	<select id="getSeq" resultType="int">
		select item_seq.nextval from dual
	</select>

	<update id="edit" parameterType="map">
		update item
			set
				item_price = #{item_price}
				item_name = #{item_name}
				category = #{category}
			where
				item_no = #{item_no}
	</update>
</mapper>
