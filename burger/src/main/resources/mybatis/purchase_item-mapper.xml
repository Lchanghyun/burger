<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	이 파일은 데이터베이스 SQL구문을 보관해두는 파일이다.
	이를 mapper(매퍼) 파일이라고 부른다.
	
	mapper 파일은 테이블당 1개씩 만드는 것을 원칙으로 하며, 여러 개 있을 수 있다.
	mapper 파일간 충돌을 방지하기 위해 별칭(namespace)을 부여하도록 강제한다.  
-->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="purchase_item">

	<select id ="PIlist" resultType="PurchaseItemVo" parameterType="int">
	
		select i.item_name, i.item_price, i.category, P.count, P.pi_no
			from purchase_item P  
				left outer join stock S on P.stock_no = S.stock_no 
				left outer join Item i on S.item_no = I.item_no 
					 where P.purchase_no=#{purchase_no}
	</select> 
	
	<select id ="StockList" resultType="PurchaseStockVo" parameterType="int">
		
		select i.item_name, i.item_price, i.category, s.stock_no
    		from stock S
		        left outer join item i on I.item_no = S.item_no
		            where S.status = 1 and S.branch_no= #{branch_no}
	</select>
	
	<update id="update" parameterType="map">
		update purchase_item set count = #{count, jdbcType=INTEGER} where item_no = #{item-no, jdbcType=INTEGER} and purchase_no =#{purchase_no, jdbcType=INTEGER} 
	</update>
	
	<select id="getSeq" resultType="int">
		select pi_seq.nextval from dual
	</select>
	
	<insert id="PIRegister" parameterType="map">
		insert into purchase_item values(
			#{pi_no, jdbcType=INTEGER}, #{purchase_no, jdbcType=INTEGER},#{branch_no, jdbcType=INTEGER},#{super_no, jdbcType=INTEGER},#{stock_no, jdbcType=INTEGER},#{count, jdbcType=INTEGER})
	</insert>
	
	<delete id="deletePurchase" parameterType="int">
		delete from purchase_item where pi_no=${pi_no}
	</delete>
</mapper>
