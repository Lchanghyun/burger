<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	이 파일은 데이터베이스 SQL구문을 보관해두는 파일이다.
	이를 mapper(매퍼) 파일이라고 부른다.
	
	mapper 파일은 테이블당 1개씩 만드는 것을 원칙으로 하며, 여러 개 있을 수 있다.
	mapper 파일간 충돌을 방지하기 위해 별칭(namespace)을 부여하도록 강제한다.  
-->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="purchase">

	<!-- 
		insert를 수행할 수 있는 구문
		- id : 외부에서 구문을 호출하기 위한 이름(식별자)
		- parameterType : 외부에서 전달되는 데이터의 자료형
		
		myBatis에서는 데이터를 배치하기 위해 다음과 같은 형태의 식을 제공
		1. #{이름} : 전달된 데이터에서 해당하는 이름의 값을 자료형에 알맞게 동적으로 배치
		2. ${이름} : 전달된 데이터에서 해당하는 이름의 값을 어떠한 처리도 없이 정적으로 배치
	 -->
	<select id="Plist" resultType="Purchase">
		select purchase_no, super_no, purchase_date, status from purchase 
	</select>
	
	<select id="SPlist" resultType="PurchaseSuperVo">
		select B.branch_name, P.purchase_no, P.super_no, P.purchase_date, P.status 
			from purchase P inner join branch B
				 on P.branch_no = B.branch_no
	</select>
	
	<select id="getSeq" resultType="int">
		select purchase_seq.nextval from dual
	</select>
	
	<insert id="PRegister" parameterType="Hashmap" >
		insert into purchase values(#{purchase_no, jdbcType=INTEGER},#{super_no, jdbcType=INTEGER},#{branch_no , jdbcType=INTEGER},sysdate,#{status, jdbcType=VARCHAR})
	</insert>
	
	<update id="SUpdate" parameterType="map">
		update purchase set status=#{status} where purchase_no=#{purchase_no}
	</update>
	

</mapper>
